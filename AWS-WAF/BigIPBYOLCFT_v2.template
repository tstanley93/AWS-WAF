{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template for BigIP BYOL. Also launches Bitnami webeserver LAMP stack with username bitnami **WARNING** This template creates an Amazon EC2 Instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "BigIPInstanceType" : {
      "Description" : "F5 BIG-IP Virtual Instance Type",
      "Type" : "String",
      "Default" : "m3.xlarge",
      "AllowedValues" : [ "m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid Big-IP EC2 instance type."
    },
    "BigIPAMI" : {
        "Description" : "F5 BIG-IP AMI",
        "Type" : "String",
        "ConstraintDescription" : "Must be a valid Big-IP AMI for the region that it is launched in."
    },
    "PoolMemberInstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.large", "m3.xlarge", "m2.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "LicenseKey": {
      "Description" : "Please enter your F5 BYOL regkey here:",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
      "ConstraintDescription" : "Please verify your F5 BYOL regkey."
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
      "IAMSecretKey": {
          "Description" : "IAM Secret Key",
          "Type": "String",
          "MinLength": "1",
          "MaxLength": "255",
          "AllowedPattern" : "[\\x20-\\x7E]*",
          "ConstraintDescription" : "can contain only ASCII characters."
          },
      "IAMAccessKey": {
          "Description" : "IAM Access Key",
          "Type": "String",
          "MinLength": "16",
          "MaxLength": "32",
          "AllowedPattern" : "[\\w]*",
          "ConstraintDescription" : "can contain only ASCII characters."
          },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings" : {
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "AMI" : "ami-af1044ca" },
      "us-west-1"      : { "AMI" : "ami-xxxxxxxx" },
      "us-west-2"      : { "AMI" : "ami-xxxxxxxx" },
      "eu-west-1"      : { "AMI" : "ami-xxxxxxxx" },
      "sa-east-1"      : { "AMI" : "ami-xxxxxxxx" },
      "ap-southeast-1" : { "AMI" : "ami-xxxxxxxx" },
      "ap-northeast-1" : { "AMI" : "ami-xxxxxxxx" }
    }
},
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "ManagementSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "ExternalSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.1.0/24",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "ManagementSubnet", "AvailabilityZone" ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "InternalSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.2.0/24",
    "AvailabilityZone" : { "Fn::GetAtt" : [ "ManagementSubnet", "AvailabilityZone" ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "ExternalRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
            "VpcId" : {"Ref" : "VPC"},
            "Tags" : [
                {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"}},
                {"Key" : "Network", "Value" : "External"}
        ]}
    },
    "ExternalRoute" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
            "RouteTableId" : { "Ref" : "ExternalRouteTable"},
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
            }
    },
    "ExternalSubnetRouteTableAssociation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "ExternalSubnet" },
            "RouteTableId" : { "Ref" : "ExternalRouteTable" }
            }
    },
    "InternalRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "Tags" : [
                {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName" }},
                {"Key" : "Network", "Value" : "Internal" }
        ]}
    },
    "InternalRoute" : {
        "Type" : "AWS::EC2::Route",
    "Properties" : {
            "RouteTableId" : { "Ref" : "InternalRouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
            }
    },
    "InternalSubnetRouteTableAssociation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "InternalSubnet" },
            "RouteTableId" : { "Ref" : "InternalRouteTable" }
            }
    },
    "ManagementRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "Tags" : [
                {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName" }},
                {"Key" : "Network", "Value" : "Mgmt" }
                ]}
    },
    "ManagementRoute" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
            "RouteTableId" : { "Ref" : "ManagementRouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
            }
    },
    "ManagementSubnetRouteTableAssociation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "ManagementSubnet" },
            "RouteTableId" : { "Ref" : "ManagementRouteTable"}
            }
    },
    "SubnetRouteTableAssociationManagement" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "ManagementSubnet" },
            "RouteTableId" : { "Ref" : "ManagementRouteTable" }
            }
    },

    "SubnetRouteTableAssociationInternal" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "InternalSubnet" },
            "RouteTableId" : { "Ref" : "InternalRouteTable" }
            }
    },
    "SubnetRouteTableAssociationExternal" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "ExternalSubnet" },
            "RouteTableId" : { "Ref" : "ExternalRouteTable" }
            }
    },
    "BigIPManagementSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "GroupDescription" : "Enable SSH access via port 22",
            "SecurityGroupIngress" : [
                {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
                {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "SSHLocation"}}
                ]}
    },
    "BigIPExternalSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "GroupDescription" : "Enable SSH access via port 22",
            "SecurityGroupIngress" : [
                {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"}
                ]}
    },
    "BigIPInternalSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "GroupDescription" : "Enable SSH access via port 22",
            "SecurityGroupIngress" : [
                {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "10.0.2.0/24"},
                {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "10.0.2.0/24"},
                {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "10.0.2.0/24"}
                ]}
    },
    "ManagementInterface" :{
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties" : {
            "Description" : "Management Interface for the BigIP",
            "GroupSet" : [ { "Ref" : "BigIPManagementSecurityGroup" } ],
            "SubnetId" : {"Ref" : "ManagementSubnet"}
            }
    },
    "InternalInterface" :{
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties" : {
            "Description" : "Internal Interface for the BigIP",
            "GroupSet" : [{ "Ref" : "BigIPInternalSecurityGroup"}],
            "SubnetId" : {"Ref" : "InternalSubnet"}
            }
    },
    "ExternalInterface" :{
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties" : {
            "Description" : "External Interface for the BigIP",
            "GroupSet" : [ { "Ref" : "BigIPExternalSecurityGroup" } ],
            "SubnetId" : {"Ref" : "ExternalSubnet"},
            "SecondaryPrivateIpAddressCount" : "1"
            }
    },
    "ManagementIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "InternalWebserverIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "ManagementIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "Properties": {
            "AllocationId" : { "Fn::GetAtt" : [ "ManagementIPAddress", "AllocationId" ] },
            "NetworkInterfaceId": { "Ref" : "ManagementInterface" }
        }
    },
    "InternalWebserverIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "Properties": {
            "AllocationId" : { "Fn::GetAtt" : [ "InternalWebserverIPAddress", "AllocationId" ] },
            "InstanceId": { "Ref" : "InternalWebServer" }
            }
    },
    "VIPIPAddress" : {
        "Type" : "AWS::EC2::EIP",
        "DependsOn" : "AttachGateway",
        "Properties" : {
            "Domain" : "vpc"
            }
    },
    "VIPIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "Properties": {
            "AllocationId" : { "Fn::GetAtt" : [ "VIPIPAddress", "AllocationId"] },
            "NetworkInterfaceId": { "Ref" : "ExternalInterface" },
            "PrivateIpAddress" : {"Fn::Select" : [ "0", {"Fn::GetAtt" : ["ExternalInterface", "SecondaryPrivateIpAddresses"]}]}
       }
    },
    "BIGIPINSTANCE" : {
        "Type" : "AWS::EC2::Instance",
        "Metadata" : {
            "AWS::CloudFormation::Init" : {
                "config" : {
                    "files" : {
                        "/tmp/firstrun.sh"    : {
                            "content" : { "Fn::Join" : [ "", [
                                "#!/bin/bash\n",
                                ". /tmp/firstrun.config\n",
                                "FILE=/tmp/firstrun.log\n",
                                "if [ ! -e $FILE ]\n"," then\n",
                                "     touch $FILE\n",
                                "     nohup $0 0<&- &>/dev/null &\n",
                                "     exit\n",
                                "fi\n",
                                "function checkF5Ready {\n",
                                "     sleep 5\n",
                                "     while [[ ! -e '/var/prompt/ps1' ]]\n"," do\n",
                                "     echo -n '.'\n",
                                "     sleep 5\n",
                                "done \n",
                                "sleep 5\n",
                                "STATUS=`cat /var/prompt/ps1`\n",
                                "while [[ ${STATUS}x != 'NO LICENSE'x ]]\n"," do\n",
                                "     echo -n '.'\n",
                                "     sleep 5\n",
                                "     STATUS=`cat /var/prompt/ps1`\n",
                                "done\n",
                                "echo -n ' '\n",
                                "while [[ ! -e '/var/prompt/cmiSyncStatus' ]]\n"," do\n",
                                "     echo -n '.'\n",
                                "     sleep 5\n",
                                "done \n",
                                "STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                                "while [[ ${STATUS}x != 'Standalone'x ]]\n"," do\n",
                                "     echo -n '.'\n",
                                "     sleep 5\n",
                                "     STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                                "done\n",
                                "}\n",
                                "function checkStatusnoret {\n",
                                "sleep 10\n",
                                "STATUS=`cat /var/prompt/ps1`\n",
                                "while [[ ${STATUS}x != 'Active'x ]]\n"," do\n",
                                "     echo -n '.'\n",
                                "     sleep 5\n",
                                "     STATUS=`cat /var/prompt/ps1`\n",
                                "done\n",
                                "}\n",
                                "exec 1<&-\n",
                                "exec 2<&-\n",
                                "exec 1<>$FILE\n",
                                "exec 2>&1\n",
                                "checkF5Ready\n",
                                "sleep 20\n",
                                "tmsh modify sys dns name-servers add {10.0.0.2}\n",
                                "sleep 20\n",
                                "tmsh create net vlan external interfaces add { 1.1 } \n",
                                "tmsh create net vlan internal interfaces add { 1.2 } \n",
                                "tmsh create net self $EXTIP/$EXTMASK vlan external\n",
                                "tmsh create net self $INTIP/$INTMASK vlan internal\n",
                                "tmsh save /sys config\n",
                                "tmsh install /sys license registration-key $REGKEY \n",
                                "checkStatusnoret\n",
                                "sleep 20\n",
                                "tmsh modify /sys global-settings hostname $HOSTNAME\n",
                                "tmsh mv cm device bigip1 $HOSTNAME\n",
                                "tmsh modify sys ntp timezone $TZ\n",
                                "tmsh modify sys db setup.run value false\n",
                                "tmsh modify ltm default-node-monitor rule icmp\n",
                                "tmsh create ltm node $WEBIP { description $WEBNAME } \n",
                                "tmsh create ltm pool $POOL members add { $WEBIP:80 } monitor gateway_icmp\n",
                                "tmsh create ltm virtual /Common/$EXTWEBNAME-80 { destination /Common/$EXTPRIVIP:80 ip-protocol tcp mask 255.255.255.255 pool /Common/$POOL source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled }\n",
                                "tmsh modify sys global-settings aws-access-key $IAMACCESS\n",
                                "tmsh modify sys global-settings aws-secret-key $IAMSECRET\n",

                                "tmsh save /sys config\n"
                                ]]
                            },
                            "mode" : "000777",
                            "owner" : "root",
                            "group" : "root"
                        },
                        "/tmp/firstrun.config" : {
                            "content" : { "Fn::Join" : [ "", [
                                "#!/bin/bash\n",
                                "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",
                                "REGKEY='",{"Ref" : "LicenseKey"},"'\n",
                                "TZ='America/New_York'\n",
                                "NTPSERVERS='206.217.199.65 198.55.111.50 108.61.73.243 204.9.54.119 173.44.32.10'\n",
                                "MGMTIP='",{"Fn::GetAtt" : ["ManagementInterface", "PrimaryPrivateIpAddress"]},"'\n",
                                "EXTIP='",{"Fn::GetAtt" : ["ExternalInterface", "PrimaryPrivateIpAddress"]},"'\n",
                                "EXTPRIVIP='",{ "Fn::Select" : [ "0", {"Fn::GetAtt" : ["ExternalInterface", "SecondaryPrivateIpAddresses"]}]},"'\n",
                                "INTIP='",{"Fn::GetAtt" : ["InternalInterface", "PrimaryPrivateIpAddress"]},"'\n",
                                "INTMASK='24'\n",
                                "EXTMASK='24'\n",
                                "WEBIP='",{"Fn::GetAtt" : ["InternalWebServer", "PrivateIp"]},"'\n",
                                "WEBSUBNET='10.0.2.0/24'\n",
                                "WEBNAME='web-1'\n",
                                "POOL='WEB-80'\n",
                                "EXTWEBNAME='basewebserver'\n",
                                "CRT='default.crt'\n",
                                "KEY='default.key'\n",
                                "IAMSECRET='", { "Ref" : "IAMSecretKey" }, "'\n",
                                "IAMACCESS='", { "Ref" : "IAMAccessKey" }, "'\n"

                                ]]},
                            "mode" : "000777",
                            "owner" : "root",
                            "group" : "root"
                            }
                    },
                    "commands" : {
                        "b-configure-BigIP" : {
                            "command" : "/tmp/firstrun.sh\n"
                            }}}}
        },
        "Properties" : {
        "ImageId" : { "Ref" : "BigIPAMI" },
        "InstanceType" : { "Ref" : "BigIPInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "AvailabilityZone" : { "Fn::GetAtt" : [ "ManagementSubnet", "AvailabilityZone" ] },
        "NetworkInterfaces" : [{
            "Description" : "Management Interface",
            "DeviceIndex" : "0",
            "NetworkInterfaceId" : { "Ref" : "ManagementInterface" }
            },
            {
            "Description" : "External Interface",
            "DeviceIndex" : "1",
            "NetworkInterfaceId" : { "Ref" : "ExternalInterface" }
            },
            {
            "Description" : "Internal Interface",
            "DeviceIndex" : "2",
            "NetworkInterfaceId" : { "Ref" : "InternalInterface" }
            }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r BIGIPINSTANCE ", " --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}}
    },
    "InternalWebServer": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType"   : { "Ref" : "PoolMemberInstanceType" },
        "SubnetId" : {"Ref" : "InternalSubnet"},
        "SecurityGroupIds" : [ {"Fn::GetAtt" : [ "WebServerSecurityGroup", "GroupId" ]} ],
        "KeyName" : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -x\n"
        ]]}}}
    },
    "WebServerSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "GroupDescription" : "Enable HTTP access via port 80",
            "SecurityGroupIngress" : [
                {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "tcp", "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0"}
        ]}}
    },
    "Outputs" : {
        "BigIPURL" : {
            "Value" : { "Fn::Join" : [ "", ["BigIP URL https://", { "Fn::GetAtt" : ["BIGIPINSTANCE", "PublicIp"] }]]},
            "Description" : "BigIP Management GUI"
            },
        "WebServerPublicIp" : {
            "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "InternalWebServer", "PublicIp" ]}, ":8080"]] },
            "Description" : "URL for newly created EC2 Instance"
    },
        "PublicVIP" : {
        "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "VIPIPAddress"}, ":80" ]] }
    }}
}
